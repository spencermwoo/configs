alias gs='git status -uno'
alias gsm='git status -uno | grep modified'

alias gd='git ls-files --deleted | xargs git add'

alias gc='git commit -m'
alias gcne='git commit --amend --no-edit'
alias gcme='git commit --amend --date=now --author "Spencer Woo <spencer.woo@liferay.com>"'

alias grb='git rebase -i'

alias greset='git commit --amend --reset-author --no-edit'

alias grne='git revert --no-edit'
alias gfgd='git ls-files --deleted | xargs git add'
alias gfgd2='git ls-files --deleted -z | git update-index --assume-unchanged -z --stdin'

alias stash='git stash -u'
alias apply='git stash apply'
alias drop='git stash clear'

# alias gl='git log'
alias gl='git log -1'
alias gl2='git show --name-only --oneline HEAD'

# _git_fetch_all(){
#   # ls -d */ | while read upstream; do git branch fetch "${upstream#origin/}" "$upstream"; done
#   find . -type d -depth 1 -exec git --git-dir={}/.git --work-tree=$PWD/{} pull --all \;
#   # git branch -r | grep -v '\->' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
#   # git fetch --all
#   # git pull --all
# }

# gfa(){
#   $(_git_fetch_all)
# }
alias grh='git reset --hard'

# gb(){
#  git branch | grep \* | cut -d ' ' -f2
# }

alias gpo='ggp'
alias gpu='gpu $(current_branch)' 

alias gfo='git fetch origin'
alias gfu='git fetch upstream'

_get_git_repo(){
  git remote -v | grep git@github.com | grep fetch | grep $1 | cut -f2 | cut -d'.' -f1-2 | sed -e's/:/\//' -e 's/git@/https:\/\//'
}

_get_git_branch(){
  git branch -v | grep '*' | cut -d' ' -f2
}

gh(){
  REMOTE=$(git branch -v | grep '*' | cut -d' ' -f2)

  if [[ $REMOTE =~ "HEAD" ]]; then
    HEAD=$(git branch -v | grep '*' | cut -d' ' -f5 | sed 's/.$//')

    if [[ $HEAD =~ "/" ]]; then
      BRANCH=$(echo $HEAD | cut -d'/' -f1)
      REPO=$(echo $HEAD | cut -d'/' -f2)

      open $(_get_git_repo $BRANCH)/tree/$REPO
    else
      open $(_get_git_repo origin)/tree/$HEAD
    fi
  else
    open $(_get_git_repo origin)/tree/$(_get_git_branch)
  fi
}

pr(){
  if [ -z "$2" ]; then
      git fetch origin pull/$1/head:pr-$1
    else
    git fetch $1 pull/$2/head:pr-$2
    fi
}