alias gitclean='git clean -xfd -e "*.iml" -e "*liferay*" -e "*.idea/"'
alias hhh='git clean -xfd -e "*.iml" -e "*liferay*" -e "*.idea/"; ant setup-libs; ant compile; ant install-portal-snaphots;'
alias minn="git ls-files modules | grep -F app.bnd | xargs grep -Fl 'Liferay-Releng-Bundle: false' | xargs dirname | xargs git ls-files | grep -F .lfrbuild-portal | xargs -r rm"

alias aa='ant all'
alias ad='ant deploy'
alias afs='ant format-source'
alias afslc='ant format-source-local-changes'

alias app='vim app.server.liferay.properties'
# alias run='./catalina.sh jpda run'

dc(){
  if [ -z "$1" ]; then
    echo "USAGE: dc <tomcat-directory>"
  else
    echo "RUNNING: 'rm -rf work; rm -rf osgi/state; rm -rf data; rm -rf $1/temp; rm -rf $1/work'"
    rm -rf work; rm -rf osgi/state; rm -rf data; rm -rf $1/temp; rm -rf $1/work
  fi
}

run(){
  if [ -z "$1" ]; then
    echo "USAGE: run <tomcat-directory>"
  else
    echo "RUNNING: './$1/bin/catalina.sh jpda run'"
    eval './$1/bin/catalina.sh jpda run'
  fi
}

# Helper Functions
_is_cwd_git() {
  if ( git rev-parse --git-dir > /dev/null 2>&1 ); then
    return 0
  fi

  return 1
}

_is_cwd_git_liferay_app() {
  if _is_cwd_git; then
    local gitFolderPath="$(git rev-parse --show-toplevel)"
    local app_bnd_file_path="${gitFolderPath}/app.bnd"

    if [ -f "${app_bnd_file_path}" ] && \
        [ $(cat "${app_bnd_file_path}" | grep '^Liferay-Releng' | wc -l | xargs) -gt 0 ]; then
      return 0
    fi
  fi

  return 1
}

_is_cwd_git_liferayDXP() {
  if _is_cwd_git; then
    local gitFolderPath="$(git rev-parse --show-toplevel)"

    if [ -d $gitFolderPath/portal-kernel ] && [ -d $gitFolderPath/modules ]; then
      return 0
    fi
  fi

  return 1
}

# cds - easily navigate to a Liferay module within a Liferay repo
cds() {
  local partial_module_name="$1"

  if [ -n "${partial_module_name}" ]; then
    local folder_path

    # Search - tailored for Liferay repo
    if _is_cwd_git_liferayDXP || _is_cwd_git_liferay_app; then
      pushd $(git rev-parse --show-toplevel) > /dev/null

      local filtered_file_paths=$(git ls-files | grep "${partial_module_name}")

      # Search strictly - match search term exactly in module name
      folder_path="$(echo "${filtered_file_paths}" \
        | awk -v moduleRegex="(/|^)${partial_module_name}/((app|bnd).bnd|build(.gradle|.xml))" \
          '$0 ~ moduleRegex && (moduleLength == "" || length < moduleLength) {moduleLength = length; module = $0} END{print module}' \
        | xargs dirname 2>/dev/null)"

      # Search not as strictly - contains search term in module name
      if [ -z "${folder_path}" ]; then
        folder_path="$(echo "${filtered_file_paths}" \
          | awk -v moduleRegex="(/|^).*${partial_module_name}.*/((app|bnd).bnd|build(.gradle|.xml))" \
            '$0 ~ moduleRegex && (moduleLength == "" || length < moduleLength) {moduleLength = length; module = $0} END{print module}' \
          | xargs dirname 2>/dev/null)"
      fi

      if [ -n "${folder_path}" ]; then
        folder_path="$(git rev-parse --show-toplevel)/${folder_path}"
      fi

      popd > /dev/null
    fi

    if [ -z "${folder_path}" ]; then
      # Search - general git repo
      if _is_cwd_git; then
        pushd $(git rev-parse --show-toplevel) > /dev/null

        folder_path="$(git ls-files | grep -m 1 "${partial_module_name}/" | xargs -n1 dirname 2>/dev/null)"

        if [ -n "${folder_path}" ]; then
          folder_path="$(git rev-parse --show-toplevel)/${folder_path}"
        fi

        popd > /dev/null
      fi

      # Search - general search using find
      if [ -z "${folder_path}" ]; then
        folder_path="$(find . -type d -name "*${partial_module_name}*" -print0 -quit)"
      fi
    fi

    if [ -n "${folder_path}" ]; then
      builtin cd -- ${folder_path}
      pwd
    fi
  else
    echo "Usage: ${FUNCNAME[0]} module-name" >&2
  fi
}

_cds() {
  if [ "${#COMP_WORDS[@]}" != "2" ] || (! _is_cwd_git); then
    return
  fi

  local gitFolderPath="$(git rev-parse --show-toplevel)"

  if [ ! -f ${gitFolderPath}/.cds ]; then
    git ls-files ${gitFolderPath}/modules | grep -F "/.lfrbuild-portal" | awk -F"/" '{print $(NF-1)}' | tr '\0' '\n' > ${gitFolderPath}/.cds
    test -f ${gitFolderPath}/git-commit-portal && git ls-tree -r --name-only $(cat ${gitFolderPath}/git-commit-portal) -- ${gitFolderPath}/modules | grep -F "/.lfrbuild-portal" | awk -F"/" '{print $(NF-1)}' | tr '\0' '\n' >> ${gitFolderPath}/.cds
  fi

  # keep the suggestions in a local variable
  local suggestions=($(compgen -W "$(cat ${gitFolderPath}/.cds)" -- "${COMP_WORDS[1]}"))

  if [ "${#suggestions[@]}" == "1" ]; then
    # if there's only one match, we remove the command literal
    # to proceed with the automatic completion of the number
    local number=$(echo ${suggestions[0]/%\ */})
    COMPREPLY=("$number")
  else
    # more than one suggestions resolved,
    # respond with the suggestions intact
    COMPREPLY=("${suggestions[@]}")
  fi
}

complete -F _cds cds